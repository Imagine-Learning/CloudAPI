FORMAT: 1A

# Imagine Learning Cloud API v1 (beta)

# Group Overview

## Requests

### Base URL

All URLs referenced in the API documentation begin with the following base URL:

| SERVER             | URL    
|:-------------------|:---------------------------------------------------------------------------------|
|Documentation Mock Server | http://imaginelearningcloudapiv1.apiary-mock.com |
|Release Server            | https://api.imaginelearning.com                  |

### Allowed HTTPs requests:

* POST   :   To create a resource, or to call specific non-resource actions
* GET    :   Get a resource or list of resources
* DELETE :   To delete resource
* PATCH  :   To update a resource
    
######NOTE: For clients that do not support DELETE or PATCH HTTP methods, use POST with additional http header:  
`X-HTTP-Method-Override: DELETE` or  
`X-HTTP-Method-Override: PATCH`


### Resource Format
The Imagine Learning REST API currently only supports JSON resource requests and representations.  Please let us know if you need another format.

## Responses

Each response from the Imagine Learning Cloud API contains:

| ITEM               | DESCRIPTION    
|:-------------------|:---------------------------------------------------------------------------------|
| HTTP Status Code   | The code indicates general success or failure of the request - see details below
| HTTP Headers       | Various response headers are set relevant to the particular request.
| Response Body      | Successful requests contain the an entity resource representation, while failed requests show an error representation.

### HTTP Response Codes used

- 200 `OK` - the request was successful.  The Response body contains entity resource data.
- 201 `Created` - the request was successful and a resource was created.
- 204 `No Content` - the request was successful, but there is no content to return
- 304 `Not Modified` - the resource has not been modied and therefore not retured (used with request headers If-Modified-Since or If-Match).
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 401 `Unauthorized` - authentication failed (missing or invalid authentication token).
- 403 `Forbidden` - authentication failed (account does not access to a resource or operation).
- 404 `Not Found` - resource was not found.
- 500 `Internal Server Error` - an unexpected error or condition was encountered.
- 503 `Service Unavailable` - We are temporarily unable to service the request. Please wait for a bit and try again.

```
HTTP/1.1 500 Internal Server Error
Cache-Control: no-cache
Pragma: no-cache
Content-Length: 468
Content-Type: application/json;charset=UTF-8
Expires: -1
Server: Microsoft-IIS/8.0
X-Powered-By: ASP.NET
Date: Tue, 08 Apr 2014 19:53:41 GMT

{
  "metadata":
  {
    "errorMsg" : "An unhandled exception occured: <details>"
  }
}
```

### Response Content
Responses typically contain up to 3 sections:

* `metadata` - this section contains any metadata about the response or resource being returned
* `<resource name>` - this section is the resource that was requested
* `notifications` - this section contains notifications of changes that the client may want to reflect in the UI

######TODO: Add full example with metadata, resource and notifications

# Group Authentication

This is an authenticated API which uses [Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4) flow of the [OAuth2](http://tools.ietf.org/html/rfc6749) specification as the authentication mechanism.

To use this API:

- An application makes a request to the POST /api/token endpoint to exchange credentials for a bearer token.
- When accessing the REST API, the application uses the bearer token to authenticate.


#Client Credentials Grant authorization
##Tokens are passwords
Keep in mind that the bearer token itself grants access to make requests on behalf of an application. These values should be considered as sensitive as passwords and must not be shared or distributed to untrusted parties.

##SSL absolutely required
To ensure student privacy and to fulfill legal obligations under [FERPA](http://www.wrightslaw.com/info/ferpa.index.htm), all requests (both to obtain and use tokens) must use HTTPS endpoints




##Step 1: Obtain a bearer token

Credentials must be exchanged for a bearer token by issuing a request to POST api/token:

- The request must be a `HTTP POST` request.
- The body of the request must be `grant_type=password&username=XXX&password=YYY`.

######Example request (Authorization header has been wrapped):

```
POST /token HTTP/1.1
Host: api.imaginelearning.com
User-Agent: Imagine Learning Unity Player
Content-Type: application/x-www-form-urlencoded;charset=UTF-8
Content-Length: 67

grant_type=password&username=demo@imaginelearning.com&password=demo
```

If the request was formatted correctly, the server will respond with a JSON-encoded payload:

######Example response (access_token has been wrapped):

```
HTTP/1.1 200 OK
Cache-Control: no-cache
Pragma: no-cache
Content-Length: 468
Content-Type: application/json;charset=UTF-8
Expires: -1
Server: Microsoft-IIS/8.0
X-Powered-By: ASP.NET
Date: Tue, 08 Apr 2014 19:53:41 GMT

{
  "access_token":"rDdBkKmtpFiYUoKlZF-LqH4qkyQM_ZywDHqF1IcViinRZg795x9aROHEwM2qlvqXPurtqRcb8GQXtx3npLUXg0ZNuBEf24HgMwNw2h6jqzbVAYc-BqukZvQ78_NaMkOzowAAzJxc9UhZ0BVWlYgNKzrMtpI_NVihRDdlygCV8GxSYL-NnVpjEOc8FxtN2m23JgOCcJIUSyUPs6WvP-buDdPO-oy9iFIMI4wk4eMdNqgRFoFLg-XFhB-S_dAqLi1Cr2_4PDgbkuHrOgUHdwXHsvolzTMC7NGTRQp0LYFLt3CZMxjBVOKEj8AxyVKR_4zO4oc4ta9dO0SKdEh4i-vEMw",
  "token_type":"bearer",
  "expires_in":1209599,
  "username":"demo@imaginelearning.com",
  "role":"Student",
  "displayname":"Demo User"
}
```

Applications should verify that the value associated with the `token_type` key of the returned object is `bearer`. The value associated with the access_token key is the bearer token.

Note that one bearer token is valid for an application at a time. Issuing another request with the same credentials to /token will return the same token until it is invalidated.

##Step 2: Authenticate API requests with the bearer token

The bearer token may be used to issue requests to the REST API endpoints. To use the bearer token, construct a normal HTTPS request and include an `Authorization` header with the value of 
`Bearer <base64 access_token value from step 1 response>` . Signing is not required.

######Example request:
```
GET <some api> HTTP/1.1
Host: api.imaginelearning.com
User-Agent: Imagine Learning Unity Player
Content-Type: application/x-www-form-urlencoded;charset=UTF-8
Authorization: bearer rDdBkKmtpFiYUoKlZF-LqH4qkyQM_ZywDHqF1IcViinRZg795x9aROHEwM2qlvqXPurtqRcb8GQXtx3npLUXg0ZNuBEf24HgMwNw2h6jqzbVAYc-BqukZvQ78_NaMkOzowAAzJxc9UhZ0BVWlYgNKzrMtpI_NVihRDdlygCV8GxSYL-NnVpjEOc8FxtN2m23JgOCcJIUSyUPs6WvP-buDdPO-oy9iFIMI4wk4eMdNqgRFoFLg-XFhB-S_dAqLi1Cr2_4PDgbkuHrOgUHdwXHsvolzTMC7NGTRQp0LYFLt3CZMxjBVOKEj8AxyVKR_4zO4oc4ta9dO0SKdEh4i-vEMw
```
  
  
## Token [/token]

### Get Authentication Token [POST]

This resource has the following attributes

- `username` The name of the user (in email format) or student [Note: student usernames are specified as 'AuthenticationDomain!Username']
- `password` The password of the user or student 

+ Request (application/json)

        { 
          "username": "useremail@example.com", 
          "password": "userspassword" 
        }

+ Response 200 (application/json)
    
        {
          "access_token":"Base64EncodedToken",
          "token_type":"bearer",
          "expires_in":1209599,
          "username": "useremail@example.com",
          "password": "userspassword"
        }

+ Response 403 (application/json)

        {
          "message" : "The credentials entered are not valid"
        }  
  


# Group Provisioning

## Student [/students/{id}]

A Student resource has the following attributes: 

- `id` (string): Unique Student identifier [Assigned by API when Student is created]
- `username` (string): Unique name used to login (must be unique within an authentication domain)
- `password` (string): Password
- `firstName` (string): First Name
- `lastName` (string): Last Name
- `gender` (string): Male or Female
- `gradeLevel` (string): Grade Level: PreK, Kinderton, First-Twelfth, Other
- `firstLanguage`(string): Oral first language
- `writtenLanguage` (string): Written language used at home
- `studentNumber` (string): Unique district or school id for Student.  [OPTIONAL]
- `syncId` (string): Id used in syncing with SIS [OPTIONAL]



+ Parameters
    + id (string) ... Student Id.

+ Model (application/hal+json)

        {
          "metadata": {},
          "student":
          {
            "id": "4176a86d-5ef3-4898-a350-8b80ddc09a49",
            "username": "demostudent@imaginelearning.com",
            "password": "123",
            "firstName": "Madyson",
            "lastName": "Cram",
            "gender" : "Male",
            "gradeLevel": "Second",
            "firstLanguage": "English",
            "writtenLanguage": "English",
            "studentNumber": "",
            "syncId": ""
          }
          "notifications": {}
        }

### Retrieve a Single Student [GET]
+ Response 200
    
    [Student][]

### Edit a Student [PATCH]
To update a Student send a Patch Request with updated value(s) for one or more of the Student resource attributes. All attributes values (properties) from the previous version are carried over by default if not specified.

+ Request (application/json)

        {
          "attribute_name": "Updated attribute contents"
        }

+ Response 200
    
    [Student][]

### Delete a Student [DELETE]
NOTE: Only the root user is authorized to delete a Student. We normally want to keep student data around forever. Typically, only a use case for cleaning up test data would call for deleting a Student.

+ Response 204

## Student's Organizations Collection [/students/{id}/organizations]

This resource represents the list of organizations for the specified student

### Retrieve Organizations for a specified Student [GET]

+ Parameters
    + id (string) ... Id of the Student

+ Response 200 (application/json)

        {
          "metadata": {},
          "organizations":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "organizationType" : "District",
              "name": "Imagine Learning School District",
              "address": "191 River Park Dr.",
              "city": "Provo",
              "state": "Utah",
              "zip": "84604",
              "country": "USA",
              "parentId": "00000000-0000-0000-0000-000000000000",
              "licenseCap": 100,
              "organizationNumber": "",
              "syncId", ""
            }, {
              "id": "6f587521-1dd4-431d-ad91-4c27c5f32776",
              "organizationType" : "School",
              "name": "Anderton Academy",
              "address": "1100 Samson Trl",
              "city": "McCall",
              "state": "Idaho",
              "zip": "83638",
              "country": "USA",
              "parentId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "licenseCap": 50,
              "organizationNumber": "",
              "syncId", ""
            }
          }
          "notifications": {}
        } 

## Student's Groups Collection [/students/{id}/groups]

This resource represents the list of groups for the specified student

### Retrieve Groups for specified Student [GET]

+ Parameters
    + id (string) ... Id of the Student

+ Response 200 (application/json)

        {
          "metadata": {},
          "groups":
          {
            [{
              "id": "5687fc7a-dccc-45b7-8be5-bf9533e37af3",
              "name": "First Grade",
              "groupType": "ILE",
              "sessionTime": 30,
              "printOption": "All",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }, {
              "id": "0a0b13c0-8315-43f3-bc5a-033d0dd340ac",
              "name": "After School",
              "groupType": "ILS",
              "sessionTime": 60,
              "printOption": "Partial",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }

## Students Collection [/students{?limit,offset,fields}]

This resource is the collection of all students that the authenticated user has rights to.

### List all Students [GET]
+ Parameters
    + limit = `10` (optional, number, `100`)...The maximum number of results to retrieve.
    + offset = `0` (optional, number, `10`)...The number of results to skip
    + fields (optional, list, `username,studentNumber`)...List of fields to include in result of partial selection

+ Response 200 (application/json)

        {
          "metadata": {},
          "students":
          {
            [{
              "id": "4176a86d-5ef3-4898-a350-8b80ddc09a49",
              "username": "demostudent@imaginelearning.com",
              "password": "123",
              "firstName": "Madyson",
              "lastName": "Cram",
              "gender": "Male",
              "gradeLevel": "Second",
              "firstLanguage": "English",
              "writtenLanguage": "English",
              "studentNumber": "",
              "syncId": ""
            }, {
              "id": "3a617f40-4748-4c32-a8c3-5d6282c6842c",
              "username": "demostudent2@imaginelearning.com",
              "password": "456",
              "firstName": "Matt",
              "lastName": "Lund",
              "gender": "Male",
              "gradeLevel": "PreK",
              "firstLanguage": "Mandarin",
              "writtenLanguage": "Chinese Simplified",                
              "studentNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }


### Create student [POST]

| property               | type    | required | default | notes
|:-----------------------|:-------:|:---:|:-----:|:-----------------------------------------------|
| username               | string  | Yes |       | Must be unique within the authentication domain of the organization
| password               | string  | Yes |       | Length 8-256 characters
| firstName              | string  | Yes |       | Length 1-32 characters
| lastName               | string  | Yes |       | Length 1-32 characters
| gender                 | string  | Yes |       | Valid values: "Male", "Female"
| gradeLevel             | string  | Yes |       | Valid values: "PreK", "Kindergarten", "First"-"Twelfth", "Other"
| firstLanguage          | number  | Yes |       | Call GET /OralLanguages for valid values
| writtenLanguage        | number  | Yes |       | Call GET /WrittenLanguages for valid values
| organizationId         | string  | Yes |       | Valid organizationId
| studentNumber          | string  | No  | null  | Length 1-64 characters
| syncId                 | string  | No  | null  | Length 1-64 characters


+ Request (application/json)

        {
          "username" : "demostudent@imaginelearning.com",
          "password" : "demopassword",
          "firstName": "Madyson",
          "lastName" : "Cram",
          "gender": "Female",
          "gradeLevel": "Second",
          "firstLanguage" : "English",
          "writtenLanguage": "English",
          "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc"
        }
        
+ Response 201

    [Student][]

+ Response 409
        
        {
          "message" : "The Student username already exists"
        }


## User [/users/{id}]

A User resource has the following attributes: 

- `id` (string) Unique User identifier [Assigned by API when User is created]
- `username` (string) Unique name used to login (email address)
- `firstName` (string) First Name
- `lastName` (string) Last Name
- `userType` (string) Type of user. Valid values: "Administrator", "Teacher"
- `language` (string) Language.  
- `userNumber` (string) Unique district or school id for User.  [OPTIONAL]
- `syncId` (string) Id used in syncing with SIS [OPTIONAL]


+ Parameters
    + id (string) ... User Id.

+ Model (application/hal+json)

        {
          "metadata": {},
          "user":
          {
            "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
            "username": "demouser@imaginelearning.com",
            "firstName": "Susan",
            "lastName": "Preator",
            "userType": "Teacher",
            "language": "English",
            "userNumber": "",
            "syncId": ""
          }
          "notifications": {}
        }

### Retrieve a Single User [GET]
+ Response 200
    
    [User][]

### Edit a User [PATCH]
To update a User send a Patch Request with updated value(s) for one or more of the Student resource attributes. All attributes values (properties) from the previous version are carried over by default if not specified.

+ Request (application/json)

        {
          "attribute_name": "Updated attribute contents"
        }

+ Response 200
    
    [User][]

### Delete a User [DELETE]
+ Response 200 (application/json)

        {
          "notifications": {}
        }
        
## Users's Organizations Collection [/users/{id}/organizations]

This resource represents the list of organizations for the specified user

### Retrieve Organizations for a specified User [GET]

+ Parameters
    + id (string) ... Id of the User

+ Response 200 (application/json)

        {
          "metadata": {},
          "organizations":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "organizationType" : "District",
              "name": "Imagine Learning School District",
              "address": "191 River Park Dr.",
              "city": "Provo",
              "state": "Utah",
              "zip": "84604",
              "country": "USA",
              "parentId": "00000000-0000-0000-0000-000000000000",
              "licenseCap": 100,
              "organizationNumber": "",
              "syncId", ""
            }, {
              "id": "6f587521-1dd4-431d-ad91-4c27c5f32776",
              "organizationType" : "School",
              "name": "Anderton Academy",
              "address": "1100 Samson Trl",
              "city": "McCall",
              "state": "Idaho",
              "zip": "83638",
              "country": "USA",
              "parentId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "licenseCap": 50,
              "organizationNumber": "",
              "syncId", ""
            }
          }
          "notifications": {}
        }      

## Users's Groups Collection [/users/{id}/groups]

This resource represents the list of groups for the specified user

### Retrieve Groups specified User [GET]

+ Parameters
    + id (string) ... Id of the User

+ Response 200 (application/json)

        {
          "metadata": {},
          "groups":
          {
            [{
              "id": "5687fc7a-dccc-45b7-8be5-bf9533e37af3",
              "name": "First Grade",
              "groupType": "ILE",
              "sessionTime": 30,
              "printOption": "All",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }, {
              "id": "0a0b13c0-8315-43f3-bc5a-033d0dd340ac",
              "name": "After School",
              "groupType": "ILS",
              "sessionTime": 60,
              "printOption": "Partial",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }

## Users Collection [/users{?limit,offset}]

This resource is the collection of all users

### List all Users [GET]

+ Parameters
    + limit = `10` (optional, number, `100`)...The maximum number of results to retrieve.
    + offset = `0` (optional, number, `10`)...The number of results to skip

+ Response 200 (application/json)

        {
          "metadata": {},
          "users":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "username": "demouser@imaginelearning.com",
              "firstName": "Susan",
              "lastName": "Preator",
              "userType": "Administrator",
              "language": "English",
              "userNumber": "",
              "syncId": ""
            }, {
              "id": "fe33418b-099f-49bf-97c0-85468a791084",
              "username": "demouser@imaginelearning.com",
              "firstName": "Clydie",
              "lastName": "Wakefield",
              "userType": "Teacher"
              "language": "Chinese Traditional",
              "userNumber": "",
              "syncId": ""            
            }
          }
          "notifications": {}
        }


### Create user [POST]

| property               | type    | required | default | notes
|:-----------------------|:-------:|:---:|:-----:|:-----------------------------------------------|
| username               | string  | Yes |       | Must be unique and in email format
| password               | string  | Yes |       | Length 8-256 characters
| firstName              | string  | Yes |       | Length 1-32 characters
| lastName               | string  | Yes |       | Length 1-32 characters
| userType               | string  | Yes |       | Valid values: "Administrator", "Teacher"
| language               | string  | Yes |       | Call GET /WrittenLanguages for valid values
| organizationId         | string  | Yes |       | Valid organizationId for initial membership
| userNumber             | string  | No  |       | Length 1-64 characters
| syncId                 | string  | No  |       | Length 1-64 characters

+ Request (application/json)

        {
          "username" : "demouser@imaginelearning.com",
          "password": "demopassword",
          "firstName": "Susan",
          "lastName" : "Preator",
          "userType" : "Teacher",
          "language" : "English",
          "organizationId" : "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
          "userNumber" : "12345"
        }
        
+ Response 201

    [User][]

+ Response 409
        
        {
          "message" : "The User username already exists"
        }


## Organization [/organizations/{id}]

An Organization reprents a school, district, sub-district, or similar grouping.   The resource has the following attributes: 

- `id` (string) Unique Organization identifier [Assigned by API when User is created]
- `name` (string) Name of the Organization
- `organizationType` (string) Type of Organization
- `address` (string) Street address
- `address2` (string) Street address 2 [OPTIONAL]
- `city` (string) City
- `state` (string) State or Province, fully spelled out
- `zip` (string) Zip Code 
- `country` (string) [ISO 3166-1 alpha-3 Country Code](https://en.wikipedia.org/wiki/ISO_3166-1)
- `parentId` (string) Id of the parent organization of this organization
- `licenseCap` (number) Number of licenses organization is limited to [OPTIONAL - ommission indicates no cap on licenses]
- `organizationNumber` (string) Unique state/district id for Organization.
- `syncId` (string) Id used in syncing with SIS
- `authenticationDomainBoundary` (boolean) Indicates whether students authentication and searching stops at this organization or flows up to parent organization(s)

+ Parameters
    + id (string) ... Organization Id.

+ Model (application/hal+json)

        {
          "metadata": {},
          "organization":
          {
            "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
            "organizationType" : "School",
            "name": "Imagine Learning Academy",
            "address": "191 River Park Dr.",
            "city": "Provo",
            "state": "Utah",
            "zip": "84604",
            "country": "USA",
            "parentId": "00000000-0000-0000-0000-000000000000",
            "licenseCap": 50,
            "organizationNumber": "",
            "syncId", ""
          }
          "notifications": {}
        }

### Retrieve a Single Organization [GET]
+ Response 200
    
    [Organization][]

### Edit an Organization [PATCH]
To update an Organization send a Patch Request with updated value(s) for one or more of the Student resource attributes. All attributes values (properties) from the previous version are carried over by default if not specified.

+ Request (application/json)

        {
          "attribute_name": "Updated attribute contents"
        }

+ Response 200
    
    [Organization][]

### Delete an Organization [DELETE]
+ Response 200 (application/json)

        {
          "notifications": {}
        }

## Organizations's Child-Organization Collection [/organizations/{id}/organizations]

This resource represents the list of child organizations for the specified organization

### Retrieve child Organizations [GET]

+ Parameters
    + id (string) ... Id of the parent Organization

+ Response 200 (application/json)

        {
          "metadata": {},
          "organizations":
          {
            [{
              "id": "6f587521-1dd4-431d-ad91-4c27c5f32776",
              "organizationType" : "School",
              "name": "Anderton Academy",
              "address": "1100 Samson Trl",
              "city": "McCall",
              "state": "Idaho",
              "zip": "83638",
              "country": "USA",
              "parentId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "licenseCap": 50,
              "organizationNumber": "",
              "syncId", ""
            }]
          }
          "notifications": {}
        }
        
## Organizations's Student Collection [/organizations/{orgId}/students/{studentId}]

This resource represents the list of students in the specified organization

### Retrieve students in an organization [GET]

+ Parameters
    + orgId (string) ... Organization Id for which to retrieve students

+ Response 200 (application/json)

        {
          "metadata": {},
          "students":
          {
            [{
              "id": "4176a86d-5ef3-4898-a350-8b80ddc09a49",
              "username": "demostudent@imaginelearning.com",
              "password": "123",
              "firstName": "Madyson",
              "lastName": "Cram",
              "gender": "Male",
              "gradeLevel": "Second",
              "firstLanguage": "English",
              "writtenLanguage": "English",
              "studentNumber": "",
              "syncId": ""
            }, {
              "id": "3a617f40-4748-4c32-a8c3-5d6282c6842c",
              "username": "demostudent2@imaginelearning.com",
              "password": "456",
              "firstName": "Matt",
              "lastName": "Lund",
              "gender": "Male",
              "gradeLevel": "PreK",
              "firstLanguage": "Mandarin",
              "writtenLanguage": "Chinese Simplified",                
              "studentNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }

### Add student to a secondary organization [PUT]

+ Parameters
    + orgId (string) ... Organization Id to add Student to
    + studentId (string) ... Student Id being added to Organization

+ Response 202 (application/json)

### Remove student from organization [DELETE]

+ Parameters
    + orgId (string) ... Organization Id to remove Student from
    + studentId (string) ... Student Id being removed from Organization

+ Response 202 (application/json)


## Organizations's Users Collection [/organizations/{orgId}/users/{userId}]

This resource represents the list of users in the specified organization

### Retrieve users in an organization [GET]

+ Parameters
    + orgId (string) ... Organization Id for which to retrieve users

+ Response 200 (application/json)

        {
          "metadata": {},
          "users":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "username": "demouser@imaginelearning.com",
              "firstName": "Susan",
              "lastName": "Preator",
              "userType": "Administrator",
              "language": "English",
              "userNumber": "",
              "syncId": ""
            }, {
              "id": "fe33418b-099f-49bf-97c0-85468a791084",
              "username": "demouser@imaginelearning.com",
              "firstName": "Clydie",
              "lastName": "Wakefield",
              "userType": "Teacher"
              "language": "Chinese Traditional",
              "userNumber": "",
              "syncId": ""            
            }
          }
          "notifications": {}
        }

### Add user to a organization [PUT]

+ Parameters
    + orgId (string) ... Organization Id to add User to
    + userId (string) ... User Id being added to Organization

+ Response 202 (application/json)

### Remove user from organization [DELETE]

+ Parameters
    + orgId (string) ... Organization Id to remove User from
    + userId (string) ... User Id being removed from Organization

+ Response 202 (application/json)


## Organizations Collection [/organizations{?limit,offset}]

This resource is the collection of all Organizations

### List all Organizations [GET]

+ Parameters
    + limit = `10` (optional, number, `100`)...The maximum number of results to retrieve.
    + offset = `0` (optional, number, `10`)...The number of results to skip

+ Response 200 (application/json)

        {
          "metadata": {},
          "organizations":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "organizationType" : "District",
              "name": "Imagine Learning School District",
              "address": "191 River Park Dr.",
              "city": "Provo",
              "state": "Utah",
              "zip": "84604",
              "country": "USA",
              "parentId": "00000000-0000-0000-0000-000000000000",
              "licenseCap": 100,
              "organizationNumber": "",
              "syncId", ""
            }, {
              "id": "6f587521-1dd4-431d-ad91-4c27c5f32776",
              "organizationType" : "School",
              "name": "Anderton Academy",
              "address": "1100 Samson Trl",
              "city": "McCall",
              "state": "Idaho",
              "zip": "83638",
              "country": "USA",
              "parentId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "licenseCap": 50,
              "organizationNumber": "",
              "syncId", ""
            }
          }
          "notifications": {}
        }


### Create Organization [POST]

| property                    | type    | required | default | notes
|:----------------------------|:-------:|:---:|:-----:|:-----------------------------------------------|
| name                        | string  | Yes |       | Length 1-128 characters
| organizationType            | string  | Yes |       | Valid values: "District", "School", "Other"
| address                     | string  | Yes |       | Length 1-128 characters
| address2                    | string  | No  | null  | Length 1-128 characters
| city                        | string  | Yes |       | Length 1-128 characters
| state                       | string  | Yes |       | Length 1-64 characters
| zip                         | string  | No  | null  | Length 5-10 characters
| country                     | string  | Yes |       | Length 3 characters ([ISO 3166-1 alpha-3 Country Code](https://en.wikipedia.org/wiki/ISO_3166-1))
| parentId                    | string  | Yes |       | Valid Organization Id of parent ("00000000-0000-0000-0000-000000000000" for Imagine Learning)
| licenseCap                  | number  | No  | null  | Empty=No Cap, otherwise Range (0-MAXINT)
| organizationNumber          | string  | No  | null  | Length 1-64 characters
| syncId                      | string  | No  | null  | Length 1-64 characters
| authentiationDomainBoundary | boolean | No  | true  | 


+ Request (application/json)

        {
          "name" : "Test School District",
          "organizationType" : "School",
          "address": "191 River Park Dr.",
          "city" : "Provo",
          "state": "Utah",
          "zip" : "84604",
          "country": "USA",
          "parentId": "00000000-0000-0000-0000-000000000000"
        }
        
+ Response 201

    [Organization][]
         

+ Response 409
        
        {
          "message" : "The User username already exists"
        }


## Group [/groups/{id}]

A Group reprents any type of class or other grouping of students.   The resource has the following attributes: 

- `id` (string) Unique Group identifier [Assigned by API when User is created]
- `name` (string) Name of the Group
- `groupType` (string) Type of group: "ILE", "ILS"
- `sessionTime` (number) Number of minutes students run each session
- `printOption` (string) "All" printouts, "Partial" printouts, or "None"
- `organizationId` (string) Id of the Organization the group belongs to
- `sectionName` (string) Name of Section [OPTIONAL]
- `groupNumber` (string) Unique district/school id for the group.  [OPTIONAL]
- `syncId` (string) Id used in syncing with SIS [OPTIONAL]


+ Parameters
    + id (string) ... Group Id.

+ Model (application/hal+json)

        {
          "metadata": {},
          "group":
          {
            "id": "5687fc7a-dccc-45b7-8be5-bf9533e37af3",
            "name": "First Grade",
            "groupType": "ILE",
            "sessionTime": 30,
            "printOption": "All",
            "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
            "sectionName": "",
            "groupNumber": "",
            "syncId": ""
          }
          "notifications": {}
        }

### Retrieve a Single Group [GET]
+ Response 200
    
    [Group][]

### Edit an Group [PATCH]
To update an Group send a Patch Request with updated value(s) for one or more of the Student resource attributes. All attributes values (properties) from the previous version are carried over by default if not specified.

+ Request (application/json)

        {
          "attribute_name": "Updated attribute contents"
        }

+ Response 200
    
    [Group][]

### Delete an Group [DELETE]
+ Response 200 (application/json)

        {
          "notifications": {}
        }

## Groups's Student Collection [/groups/{groupId}/students/{studentId}]

This resource represents the list of students in the specified group

### Retrieve students in a group [GET]

+ Parameters
    + groupId (string) ... Group Id for which to retrieve students

+ Response 200 (application/json)

        {
          "metadata": {},
          "students":
          {
            [{
              "id": "4176a86d-5ef3-4898-a350-8b80ddc09a49",
              "username": "demostudent@imaginelearning.com",
              "password": "123",
              "firstName": "Madyson",
              "lastName": "Cram",
              "gender": "Male",
              "gradeLevel": "Second",
              "firstLanguage": "English",
              "writtenLanguage": "English",
              "studentNumber": "",
              "syncId": ""
            }, {
              "id": "3a617f40-4748-4c32-a8c3-5d6282c6842c",
              "username": "demostudent2@imaginelearning.com",
              "password": "456",
              "firstName": "Matt",
              "lastName": "Lund",
              "gender": "Male",
              "gradeLevel": "PreK",
              "firstLanguage": "Mandarin",
              "writtenLanguage": "Chinese Simplified",                
              "studentNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }

### Add student to a group [PUT]

+ Parameters
    + groupId (string) ... Group Id to add Student to
    + studentId (string) ... Student Id being added to Group

+ Response 202 (application/json)

### Remove student from group [DELETE]

+ Parameters
    + groupId (string) ... Group Id to remove Student from
    + studentId (string) ... Student Id being removed from Group

+ Response 202 (application/json)


## Groups's Users Collection [/groups/{groupId}/users/{userId}]

This resource represents the list of users in the specified group

### Retrieve users in a group [GET]

+ Parameters
    + groupId (string) ... Group Id for which to retrieve users

+ Response 200 (application/json)

        {
          "metadata": {},
          "users":
          {
            [{
              "id": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "username": "demouser@imaginelearning.com",
              "firstName": "Susan",
              "lastName": "Preator",
              "userType": "Administrator",
              "language": "English",
              "userNumber": "",
              "syncId": ""
            }, {
              "id": "fe33418b-099f-49bf-97c0-85468a791084",
              "username": "demouser@imaginelearning.com",
              "firstName": "Clydie",
              "lastName": "Wakefield",
              "userType": "Teacher"
              "language": "Chinese Traditional",
              "userNumber": "",
              "syncId": ""            
            }
          }
          "notifications": {}
        }

### Add user to a group [PUT]

+ Parameters
    + groupId (string) ... Group Id to add User to
    + userId (string) ... User Id being added to Group

+ Response 202 (application/json)

### Remove user from group [DELETE]

+ Parameters
    + groupId (string) ... Group Id to remove User from
    + userId (string) ... User Id being removed from Group

+ Response 202 (application/json)
        

## Groups Collection [/groups{?limit,offset}]

This resource is the collection of groups owned by the current user.

### List all Groups for current User [GET]

+ Parameters
    + limit = `10` (optional, number, `100`)...The maximum number of results to retrieve.
    + offset = `0` (optional, number, `10`)...The number of results to skip

+ Response 200 (application/json)

        {
          "metadata": {},
          "groups":
          {
            [{
              "id": "5687fc7a-dccc-45b7-8be5-bf9533e37af3",
              "name": "First Grade",
              "groupType": "ILE",
              "sessionTime": 30,
              "printOption": "All",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }, {
              "id": "0a0b13c0-8315-43f3-bc5a-033d0dd340ac",
              "name": "After School",
              "groupType": "ILS",
              "sessionTime": 60,
              "printOption": "Partial",
              "organizationId": "9fad4cfd-f669-4cc7-a38d-275d033eb7bc",
              "sectionName": "",
              "groupNumber": "",
              "syncId": ""
            }
          }
          "notifications": {}
        }


### Create Group [POST]

| property               | type    | required | default | notes
|:-----------------------|:-------:|:---:|:-----:|:-----------------------------------------------|
| name                   | string  | Yes |       | Length 1-256 characters
| groupType              | string  | Yes |       | Valid values: "ILE", "ILS"
| sessionTime            | number  | Yes |       | 
| printOption            | string  | Yes |       | Valid values: "Full", "Partial", "None"
| organizationId         | string  | Yes |       | Valid Organization Id the group belongs to
| sectionName            | string  | No  | null  | Length 1-256 characters
| groupNumber            | string  | No  | null  | Length 1-64 characters
| syncId                 | string  | No  | null  | Length 1-64 characters


+ Request (application/json)

        {
          "name" : "After School",
          "groupType" : "ILE",
          "sessionTime" : 30,
          "printOption" : "All",
          "organizationId" : "9fad4cfd-f669-4cc7-a38d-275d033eb7bc"
        }
        
+ Response 201

    [Group][]
         

+ Response 409
        
        {
          "message" : "The Group name already exists"
        }

# Group Sequencing

## Product [/products]

A product resource represents a sequenced product that can be played.

### Get products [GET]

+ Response 200 (application/json)

        {
            [
                { "identifier": "ILE" },
                { "identifier": "Spanish" },
                { "identifier": "Test" },
                { "identifier": "CommunicationTest" }
            ]
        }

## Activity [/activities{?product,clientActivitySupport}]

An Activity resource represents the next activity selected for the Student to play

### Get next Activity [GET]

The selectedContent construct in the response instructs the client what should be played:

- `activity` (string): This is the identifier of the activity to be played
- `dataSetNum` (number): Dataset to be played.  Corresponds to DataSet.DataSetNum in the Imagine database.  This is frequently confused with artificial dataset keys.  So to be clear, this is the very same number that the designer would refer to as "dataset 1000", etc.
- `activitySpecificDatas`: (see below): Returns any activity saved data that's previously been stored for this student / product.
- `diagnosticData`: Anything contained here is meant to be used to facilitate dev and qa but should not be consumed by the client for other purposes, without further discussion.

+ Parameters
    + product = `` (required, string, `ILE`)...The unique identifer (or Name) of the Product to run.
    + clientActivitySupport = `` (optional, number, `123456789`)...The hash/Id of the set of supported Activities and DataSets. Omit the value (or use the value 0) to imply client support of all Activities and DataSets known to the server.

+ Response 200 (application/json)

        {
            "selectedContent": {
                "activity": "RecognizeLetters",
                "dataSetNum": 1,
                "activitySpecificDatas": null
            },
            "diagnosticData": {
            "expectedSkillsToBeScored": [
                {
                    "skillId": "Summary_RecognizeLetters",
                    "skillType": "Percentage"
                },
                {
                    "skillId": "A",
                    "skillType": "Mastery"
                },
                {
                    "skillId": "M",
                    "skillType": "Mastery"
                }
                ]
            },
            "testSection": null,
            "reviewMenuEnabledActivitySection": null,
            "recordingDatas": null
        }

+ Response 404 (application/json)

        {
            "message": "No clientActivitySupport with ID = 123456789. Use POST /activities/support"
        }

## Activity [/activities]

### Process completed Activity [PUT]

+ Request (application/json)

        {
            "product": "ILE",
            "completedActivityData": {
                "activity": "RecognizeLetters",
                "dataSetNum": 1,
                "elapsedTime": "00:00:00",
                "scores": [
                {
                    "skill": "Summary_RecognizeLetters",
                    "numPossible": 10,
                    "numCorrect": 0
                },
                {
                    "skill": "A",
                    "mastered": false
                },
                {
                    "skill": "M",
                    "mastered": false
                }
                ]
            }
        }

+ Response 204

### Save Activity progress [POST]

+ Request (application/json)

        {
            "activity": "PreAndPlacementTest",
            "activitySavedDataCollection": [
            {
                "key": "TestData",
                "value": "TestData"
            }
            ]
        }

+ Response 204

## Client Activity Support [/activities/support]

A client may send its set of supported content (Activities and DataSets) such that server-side sequencing logic may determine to not send any activity to the client which it doesn't have the capability to play

# Create Client Activity Support  [POST]

+ Request (application/json)

        {
            "clientActivitySupport": 123456789,
            "supportedActivities": [
            {
                "activity": "AffixAction",
                "supportedDataSetNums": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
            },
            {
                "activity": "AlphabetQuiz",
                "supportedDataSetNums": [1,2,3,4,5]
            }
            ]
        }

+ Response 201

+ Response 409 (application/json)

        {
            "message": "Supported activities/datasets doesn't match previously POSTed ClientActivtySupport sent with the same hash/ID value: 123456789"
        }

## Client Activity Support data [/activities/support/{clientActivitySupport}]

+ Parameters
    + clientActivitySupport (integer hash) ... value used to create client activity support (POST /activities/support)

# Delete Client Activity Suport data [DELETE]

NOTE: Only the root user is authorized to delete client activity support data from server storage. Normally, we would not ever want to delete client activity support data once created. Typically, only a use case for cleaning up test data would call for deleting client activity support data.

+ Response 204

## Student Sequencing Data [/activities/{id}]

Operations on underlying student data store

+ Parameters
    + id (string) ... Student Id.

# Seed the Student with sample Data [POST]

NOTE: Only the root user is authorized to seed a student with sample data. Normally student data would be built over the course of natural use of the product. Typically, only tests would call for seeding a student with data.

The POST content is optional. Either supply valid student data (json document) or omit the content to use a server-side pre-built sample. Student data may only be seeded for a new student, i.e. one that does not yet have sequencing data.

+ Request (application/json)

        {
            "_id": "f566a01b-c3dd-47e1-a549-a3a0011b9fc3",
            "Revision": 4,
            "StudentProductStateCollection": [
                {
                    "Product": "ILE",
                    "LastStrandChoiceAlgorithmUsed": "LongestSincePlayed",
                    "NumReviewMenuChoicesMade": 0,
                    "IsOnDemandTestAssigned": false
                }
            ],
            "StudentLessonStateCollection": [
                {
                    "Lesson": "01d6691f-911f-45b5-b861-778c725b4d98",
                    "LessonState": "Satisfied",
                    "SatisfiedReason": "SkippedByGradeLevel",
                    "RowVersion": 0,
                    "AnyBranchEverFailed": false
                },
                {
                    "Lesson": "d17e51fd-a445-47a1-8145-47d35f45af75",
                    "LessonState": "Satisfied",
                    "SatisfiedReason": "SkippedByGradeLevel",
                    "RowVersion": 0,
                    "AnyBranchEverFailed": false
                }
            ],
            "ActivityCountedCollection": [
                {
                    "LessonBranch": "Main",
                    "Activity": "EverydayWordsInScenes",
                    "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                    "SequenceNode": "b7974386-2593-44ed-80ae-938b46233ff7",
                    "DataSet": 1,
                    "DateTime": "2014-09-08T17:12:44.6435162-06:00",
                    "ElapsedSeconds": 150.0
                },
                {
                    "LessonBranch": "Main",
                    "Activity": "RecognizeEverydayWords",
                    "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                    "SequenceNode": "f6ac8dd4-8ca5-4663-bcd4-f7eeade29b29",
                    "DataSet": 1,
                    "DateTime": "2014-09-08T17:12:46.442246-06:00",
                    "ElapsedSeconds": 150.0,
                    "Scores": [
                        {
                            "Activity": "RecognizeEverydayWords",
                            "DataSet": 1,
                            "Skill": "Summary_RecognizeEverydayWords",
                            "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                            "LessonBranch": "Main",
                            "ActivityNode": "f6ac8dd4-8ca5-4663-bcd4-f7eeade29b29",
                            "DateTime": "2014-09-08T17:12:46.442246-06:00",
                            "NumPossible": 3,
                            "NumCorrect": 1,
                            "Mastered": false,
                            "QuestionResponses": [
                                {
                                    "QuestionNumber": 1,
                                    "ResponseNumber": 1,
                                    "AttemptNumber": 1,
                                    "ProductVersion": "1.0.0.0"
                                },
                                {
                                    "QuestionNumber": 2,
                                    "ResponseNumber": 2,
                                    "AttemptNumber": 2,
                                    "ProductVersion": "1.0.0.0"
                                },
                                {
                                    "QuestionNumber": 3,
                                    "ResponseNumber": 3,
                                    "AttemptNumber": 3,
                                    "ProductVersion": "1.0.0.0"
                                }
                            ]
                        },
                        {
                            "Activity": "RecognizeEverydayWords",
                            "DataSet": 1,
                            "Skill": "bird",
                            "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                            "LessonBranch": "Main",
                            "ActivityNode": "f6ac8dd4-8ca5-4663-bcd4-f7eeade29b29",
                            "DateTime": "2014-09-08T17:12:46.442246-06:00",
                            "NumPossible": 0,
                            "NumCorrect": 0,
                            "Mastered": false
                        }
                    ]
                }
            ],
            "ActivitySavedDataCollection": [
                {
                    "Activity": "ThemeSong",
                    "VariableName": "TestData",
                    "Value": "TestData"
                },
                {
                    "Activity": "TimeToRead",
                    "VariableName": "InfoText_ScaffoldingLevel",
                    "Value": "NOT_SET"
                }
            ],
            "StudentLessonStateHistoryV2Collection": [
                {
                    "ActivatedRevision": 0,
                    "AnyBranchEverFailed": false,
                    "CurrentBranch": "",
                    "LastBranch": "",
                    "Lesson": "01d6691f-911f-45b5-b861-778c725b4d98",
                    "LessonState": "Satisfied",
                    "PendingBranchOutcome": "",
                    "SatisfiedReason": "SkippedByGradeLevel",
                    "LessonStateTransitionReason": "SkippingBasedOnGrade",
                    "DateTime": "2014-09-08T17:12:39.7157042-06:00"
                },
                {
                    "ActivatedRevision": 0,
                    "AnyBranchEverFailed": false,
                    "CurrentBranch": "",
                    "LastBranch": "",
                    "Lesson": "d17e51fd-a445-47a1-8145-47d35f45af75",
                    "LessonState": "Satisfied",
                    "PendingBranchOutcome": "",
                    "SatisfiedReason": "SkippedByGradeLevel",
                    "LessonStateTransitionReason": "SkippingBasedOnGrade",
                    "DateTime": "2014-09-08T17:12:39.7157042-06:00"
                }
            ],
            "TestInstances": [
                {
                    "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                    "LessonBranch": "Main",
                    "TestType": "Pretest",
                    "TimeStarted": "2014-09-08T17:12:44.0948972-06:00",
                    "TimeCompleted": "2014-09-08T17:12:44.3662592-06:00",
                    "TestInstanceId": "1",
                    "TestSectionInstances": [
                        {
                            "TestSection": "Basic Vocab 1-5",
                            "TestQuestionInstances": [
                                {
                                    "TestQuestion": "q157",
                                    "TimeStarted": "2014-09-08T17:12:44.2952474-06:00",
                                    "TimeCompleted": "2014-09-08T17:12:44.2952474-06:00",
                                    "TestOptionInstances": [
                                        {
                                            "ClickCount": 1,
                                            "IsSelected": false,
                                            "ResponseLatency": 5,
                                            "TestOption": "opt729"
                                        },
                                        {
                                            "ClickCount": 1,
                                            "IsSelected": true,
                                            "ResponseLatency": 5,
                                            "TestOption": "opt730"
                                        },
                                        {
                                            "ClickCount": 1,
                                            "IsSelected": false,
                                            "ResponseLatency": 5,
                                            "TestOption": "opt731"
                                        },
                                        {
                                            "ClickCount": 1,
                                            "IsSelected": false,
                                            "ResponseLatency": 5,
                                            "TestOption": "opt732"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "MdtPredictionValidationCollection": [
                {
                    "PredictionValidationFrequency": 20.0,
                    "MdtPredictionParameters": "GradeID Second, SectionID 39: QID51(0.689895470383,0.310104529617,0.6,0.4);QID52(0.852233676975,0.147766323025,0.6,0.4);QID53(0.90243902439,0.09756097561,0.444444444444,0.555555555556);QID54(0.923875432525,0.076124567475,0.65,0.35);QID58(0.973118279569,0.026881720431,0.153846153846,0.846153846154);QID61(0.844290657439,0.155709342561,0.6,0.4);QID62(0.585365853658,0.414634146342,0.5,0.5);",
                    "DateTime": "2014-09-08T17:12:44.0908968-06:00",
                    "Lesson": "c3fe8440-1676-4147-8888-83ed059d9771",
                    "SequenceNode": "3a6b0d0e-9ab3-484b-b768-92e0a51d2f53",
                    "TestSection": "Basic Vocab 1-5",
                    "MdtPredictionResultType": "UncertainForcedValidation",
                    "GradeLevel": "Second"
                }
            ]
        }
        
+ Response 201

# Delete Student Data [DELETE]

NOTE: Only the root user is authorized to delete student data. We normally want to keep student data around forever. Typically, only a use case for cleaning up test data would call for deleting student data.

Should be performed BEFORE deleting the Student itself via management/provisioning API's (DELETE /students/{id})

+ Response 204

## Recordings Metadata [/activities/recordings]

Student recordings made in some activities

# Store Recordings Metadata [POST]

+ Request (application/json)

        {
            "product": "ILE",
            "activity": "DecodableBooks",
            "dataSetNum": 1,
            "recordingDatas": [
            {
                "name": "TestRecording"
            }
            ]
        }

+ Response 201 (application/json)

        {
            "recordingIds": [
                "8ef75a2f-92c8-4996-98d2-2d6122f137c3"
            ]
        }

## Recordings Bytes [/activities/recordings/{id}]

+ Parameters
    + id (string) ... Server-assigned recording id, returned in response to store recordings metadata (POST /activities/recordings).

# Store Recording Bytes [PUT]

+ Request (application/octect-stream)

+ Response 201

# Get Recording Bytes [GET]

+ Request (application/octect-stream)

+ Response 200 (application/octect-stream)

# Delete Recording Bytes [DELETE]

NOTE: Only the root user is authorized to delete student recordings. We normally want to keep student recordings around forever. Typically, only a use case for cleaning up test data would call for deleting student recordings.

+ Response 204

# Group Runtime

## Logs Collection [/logs]

This resource is the collection of all diagnostic logs that the authenticated user has rights to.

### Create diagnostic log entry [POST]

| property | type | required | default | notes
|:-----------------------|:-------:|:---:|:-----:|:-----------------------------------------------|
| reporterApplication | string | Yes | |
| reporterComponent | string | Yes | |
| message | string | Yes | |
| details | string | No | |
| logCreationTimestamp | date | Yes | | UTC date-time, not local
| context | string | No | | TODO - I want this to be an array of string-string

+ Request (application/json)

        {
          "reporterApplication" : "ILE Unity",
          "reporterComponent": "Imagine.ILE.Activities.RecognizeLetters",
          "message": "System.ApplicationException: Error in the application.",
          "details" : "at ConsoleApplication13.Program.Main(String[] args) in c:\Users\Matthew\Documents\Visual Studio 2013\Projects\Consolelication13\ConsoleApplication13\Program.cs:line 13",
          "logCreationTimestamp": "2014-05-06T15:05:03.0238299Z"
        }
        
+ Response 202

# Group Reports

## Growth Reports [/growth{?student,gradelevel,group,graphtype,schoolyearstartmmdd}]

Generate growth reports by student(s), gradelevel(s),group(s), organization(s).

### Get Growth Reports for Students/gradelevels/groups/organization [GET]

The selectedContent construct in the response instructs the client what is returned back:

- `BeginningDate` (string): Beginning date from which the scores are counted for the report.
- `EndDate` (string): End date of the results.
- `SimilarTrends`: (List of IrtPoints): Each containing a date and a floating point number.
- `StudentTrends`: (List of IrtPoints): Each containing a date and a floating point number.
- `GroupsTrends`: (List of IrtPoints): Each containing a date and a floating point number.
- `GradesTrends`: (List of IrtPoints): Each containing a date and a floating point number.
- `GradeRanges`: (List of grade ranges) Each containing Grade, LowPoint(float) and and HighPoint(float).

+ Parameters
    + student = `` (optional, list of strings, ``)...The list of student tokens identifying which students if any the report needs to be generated for. It is important that atleast one of the student, gradelevel, group has to be sent in to get successful results.
    + gradelevel = `` (optional, list of strings, ``)...The list of grade level tokens identifying for which grades if any, the report needs to be generated.
    + group = `` (optional, list of strings, ``)...The list of group tokens identifying for which student groups if any, the report needs to be generated.
    + graphtype = `` (optional, enum GraphType, `GraphType.AllPoints`)...The Graph Type for the reports, RollingAverage(default), WeeklyAverage and AllPoints.
    + schoolyearstartmmdd = `` (optional, string, `10/14`)...The beginning Day and Month from which the report needs to be generated. This is for testing purpose only.Actual start date will be taken from the Organization information.


+ Request (application/json)

        {
          "student" : "DZOtOM8mCMOjDJ0sOoqqD68rBJWvCM4jOJCvOp0mPZTcDcHY0",
          "gradelevel": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
          "group": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
          "graphtype" : GraphType.AllPoints ,
          "schoolyearstartmmdd": "05/06"
        }
        
+ Response 302 (application/json)

        {
            "BeginDate" : "2014-05-06T15:05:03.0238299Z"
            "EndDate" : "2014-09-06T15:05:03.0238299Z"
            "SimilarTrends": [
                    "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "IrtPoints": [
                        {
                            "Date" :"2014-07-18T15:05:03.0238299Z"
                            "Score" :  45
                        },
                        {
                            "Date" :"2014-08-24T15:05:03.0238299Z"
                            "Score" :  80
                        }
                    ]
                
                ],
            "StudentTrends": [
                    "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "IrtPoints": [
                        {
                            "Date" :"2014-07-18T15:05:03.0238299Z"
                            "Score" :  45
                        },
                        {
                            "Date" :"2014-08-24T15:05:03.0238299Z"
                            "Score" :  80
                        }
                    ]
                
                ],
                "GroupsTrends": [
                    "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "IrtPoints": [
                        {
                            "Date" :"2014-07-18T15:05:03.0238299Z"
                            "Score" :  45
                        },
                        {
                            "Date" :"2014-08-24T15:05:03.0238299Z"
                            "Score" :  80
                        }
                    ]
                
                ],
                "GradesTrends": [
                    "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "IrtPoints": [
                        {
                            "Date" :"2014-07-18T15:05:03.0238299Z"
                            "Score" :  45
                        },
                        {
                            "Date" :"2014-08-24T15:05:03.0238299Z"
                            "Score" :  80
                        }
                    ]
                
                ]
                "GradeRanges": [
                    {
                        "Grade": "First",
                        "LowPoint" : 25
                        "HighPoint" : 87
                    },
                    {
                        "Grade": "Second",
                        "LowPoint" : 45
                        "HighPoint" : 92
                    }
                
                ]
                
        }
    
## Filter Reports [/filter/details{?organizationIds,groupIds,studentIds,gradelevelIds}]

Filter by Organizations, groups, students or gradelevels.

### Returns objects corresponding to each specified ID in parameters. Include user role so we know which filter view we're using. [GET]

The selectedContent construct in the response instructs the client what is returned back:

- `Organizations` (list of strings): List of Organizations each containing a Token(string) and Name(string).
- `Groups` (list of strings): List of Groups each containing a Token(string) and UserName(string).
- `Students`: (list of strings): List of Students each containing a Token(string),Name(string), Grade (string) and StudentNumber(string).
- `GradeLevels`: (List of strings): GradeLevel and a list of  Organizations each containing a Token(string) and Name(string).


+ Parameters
    + organizationIds = `` (optional, list of strings, ``)...List of organization Ids. One of either organizationIds, groupsIds,studentIds or gradelevelIds should be provided as input to the call to get proper results back.
    + groupIds = `` (optional, list of strings, ``)...List of group Ids.
    + studentIds = `` (optional, list of strings, ``)...List of student Ids.
    + gradelevelIds = `` (optional, list of strings, ``)...List of grade level Ids.
    


+ Request (application/json)

        {
          "organizationIds" : "DZOtOM8mCMOjDJ0sOoqqD68rBJWvCM4jOJCvOp0mPZTcDcHY0",
          "groupsIds": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
          "studentIds": "D40mD40mD40jD40mC2qmD40mBJ0mD40jD40mD40mD40mD40m0",
          "gradelevelIds" : "B70mB70mB70jB70mC2qmB70mBJ0mB70jB70mB70mB70mB70m0"
        }
        
+ Response 302 (application/json)

        {
                "Organizations": [
                    {
                        "Token": "DZOtOM8mCMOjDJ0sOoqqD68rBJWvCM4jOJCvOp0mPZTcDcHY0",
                        "Name": "Organization1"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "Name": "Organization2"
                    }
                
                ],
                "Groups": [
                    {
                        "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                        "UserName": "Teacher1"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "UserName": "Teacher2"
                    }
                
                ],
                "Students": [
                    {
                        "Token": "D40mD40mD40jD40mC2qmD40mBJ0mD40jD40mD40mD40mD40m0",
                        "Name": "Student1"
                        "Grade" : "First"
                        "StudentNumber" : "Student1234"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "Name": "Student2"
                        "Grade" : "Third"
                        "StudentNumber" : "Student4567"
                    }
                
                ],
                "GradeLevels": [
                    "Grade": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "Organizations": [
                        {
                            "Token": "B70mB70mB70jB70mC2qmB70mBJ0mB70jB70mB70mB70mB70m0",
                            "Name": "Organization1"
                        },
                        {
                            "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                            "Name": "Organization2"
                        }
                    ]
                
                ]

        }
        
## Filter GradeLevel Reports [/filter/gradeLevels{?organizationIds,groupIds,studentIds,gradelevelIds}]

Filter by gradelevels.

###  Returns array of organizations grouped by grade level. [GET]

The selectedContent construct in the response instructs the client what is returned back:

- `OrganizationsbyGradeResult`: List of Organizations by Grade Levels containing
    - `TotalResults` (int): Total number of results.
    - `BatchIndex` (int): Total number of results.
    - `BatchCount` (int): Total number of results.
    - `OrganizationsByGrade` (int): List of Organizations by Grade containing,
        - `Grade` (GradeLevel): List of Organizations each containing a Token(string) and Name(string).
        - `Organizations` (list of strings): List of Organizations each containing a Token(string) and UserName(string).

+ Parameters
    + organizationIds = `` (optional, list of strings, ``)...List of organization Ids. One of either organizationIds, groupsIds,studentIds or gradelevelIds should be provided as input to the call to get proper results back.
    + groupIds = `` (optional, list of strings, ``)...List of group Ids.
    + studentIds = `` (optional, list of strings, ``)...List of student Ids.
    + gradelevelIds = `` (optional, list of strings, ``)...List of grade level Ids.
    


+ Request (application/json)

        {
          "organizationIds" : "DZOtOM8mCMOjDJ0sOoqqD68rBJWvCM4jOJCvOp0mPZTcDcHY0",
          "groupsIds": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
          "studentIds": "D40mD40mD40jD40mC2qmD40mBJ0mD40jD40mD40mD40mD40m0",
          "gradelevelIds" : "B70mB70mB70jB70mC2qmB70mBJ0mB70jB70mB70mB70mB70m0"
        }
        
+ Response 302 (application/json)

        {
                "Organizations": [
                    {
                        "Token": "DZOtOM8mCMOjDJ0sOoqqD68rBJWvCM4jOJCvOp0mPZTcDcHY0",
                        "Name": "Organization1"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "Name": "Organization2"
                    }
                
                ],
                "Groups": [
                    {
                        "Token": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                        "UserName": "Teacher1"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "UserName": "Teacher2"
                    }
                
                ],
                "Students": [
                    {
                        "Token": "D40mD40mD40jD40mC2qmD40mBJ0mD40jD40mD40mD40mD40m0",
                        "Name": "Student1"
                        "Grade" : "First"
                        "StudentNumber" : "Student1234"
                    }
                    {
                        "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                        "Name": "Student2"
                        "Grade" : "Third"
                        "StudentNumber" : "Student4567"
                    }
                
                ],
                "GradeLevels": [
                    "Grade": "C30mC30mC30jC30mC2qmC30mBJ0mC30jC30mC30mC30mC30m0",
                    "Organizations": [
                        {
                            "Token": "B70mB70mB70jB70mC2qmB70mBJ0mB70jB70mB70mB70mB70m0",
                            "Name": "Organization1"
                        },
                        {
                            "Token": "A50mC30mA50jA50mC2qmA50mBJ0mA50jA50mA50mA50mA50m0",
                            "Name": "Organization2"
                        }
                    ]
                
                ]

        }